{"version":3,"sources":["store.tsx","utils/localStorage.ts","pages/login.tsx","App.tsx","index.tsx"],"names":["initialUserData","reducers","combineReducers","userData","state","action","type","data","store","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","doesUserDataExist","exist","localStorage","getItem","console","log","Login","props","login","password","username","header","Headers","append","fetch","method","body","JSON","stringify","headers","then","r","text","t","undefined","parse","swal","fire","title","confirmButtonText","location","reload","String","includes","setItem","href","Card","className","Content","Header","Meta","Description","Input","onChange","e","d","setState","value","icon","iconPosition","placeholder","extra","Button","onClick","this","animated","visible","hidden","Icon","name","React","App","panes","menuItem","render","Tab","Pane","userSearch","filtedArray","usersRaw","filter","element","index","array","readyArray","i","item","Table","Row","Cell","push","users","id","celled","HeaderCell","Body","length","eventsRaw","Accordion","panels","events","Divider","List","horizontal","Item","verticalAlign","cpu","usage","maxValue","toFixed","styles","buildStyles","textSize","pathColor","free","numberOfCore","ram","disk","total","available","socket","openSocket","subscribeToServer","on","init","dispatch","getUsers","getEvents","arrayRaw","ulItems","a","key","content","Date","getDay","getMonth","getFullYear","getHours","getMinutes","Component","ReactDOM","path","component","exact","document","getElementById"],"mappings":"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","file":"static/js/main.a32f8491.chunk.js","sourcesContent":["import {createStore, compose, combineReducers, applyMiddleware} from \"redux\"\nimport thunkMiddleware from \"redux-thunk\"\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nlet initialUserData = {\n\n}\n\nfunction userData(state = initialUserData, action:{type:string, data:any}){\n    switch(action.type){\n        case \"change\": return action.data\n        default: return state\n    }\n}\n\nlet reducers = combineReducers({\n    userData\n})\n\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nlet store = createStore( reducers, composeWithDevTools(\n    applyMiddleware(thunkMiddleware),\n    // other store enhancers if any\n  ));\n\nexport default store;","interface IDoesUserDataExist{\n    exist:boolean,\n    data:any\n}\n\nexport function doesUserDataExist():IDoesUserDataExist{\n\n    let userData:IDoesUserDataExist = {\n        data:null,\n        exist:false\n    }\n\n    if(window.localStorage.getItem(\"userData\") !== \"null\") {\n        userData = {data:window.localStorage.getItem(\"userData\"), exist:true} \n    }\n\n    console.log(userData)\n\n    return userData;\n\n}","import * as React from 'react';\nimport {Container, Card, Input, Button, Icon} from \"semantic-ui-react\"\nimport swal from 'sweetalert2'\nimport store from '../store';\nimport { doesUserDataExist } from '../utils/localStorage';\n\nexport interface LoginProps {\n    \n}\n \nexport interface LoginState {\n    username:string,\n    password:string\n}\n \nclass Login extends React.Component<LoginProps, LoginState> {\n\n    login = ()=>{\n        let data = {\n            \"userData\":{\n                \"password\": this.state.password,\n                \"username\": this.state.username\n            }\n        }\n        let header = new Headers();\n        \n        header.append(\"Content-Type\", \"application/json; charset=utf-8\")\n        fetch(\"/admin/login\", {\n            method:\"post\",\n            body: JSON.stringify(data),\n            headers: header\n        }).then((r)=>{\n            r.text().then((t)=>{\n                if(JSON.parse(t)[\"error\"] !== undefined){\n                    swal.fire(\n                        {\n                            title:\"ERROR!\",\n                            text: \"Wrong username or password\",\n                            type:\"error\",\n                            confirmButtonText:\"Try again!\"\n                        }\n                    ).then(()=>{\n                        window.location.reload(true)\n                    })\n                }else if(String(JSON.parse(t)[\"message\"]).includes(\"VERIFICATION EMAIL SENT\")){\n                    swal.fire(\n                        {\n                            title:\"NEW DEVICE?\",\n                            text: \"Please check your e-mail to verify this device\",\n                            type:\"info\",\n                            confirmButtonText:\"Okay!\"\n                        }\n                    ).then(()=>{\n                        window.location.reload(true)\n                    })\n                }else if(String(JSON.parse(t)[\"message\"]).includes(\"USER AUNTENTICATED\")){\n                    window.localStorage.setItem(\"userData\", JSON.stringify(JSON.parse(t)[\"userData\"]))\n                    swal.fire(\n                        {\n                            title:\"WELCOME BACK!\",\n                            type:\"success\",\n                            confirmButtonText:\"Enter\"\n                        }\n                    ).then(()=>{\n                        window.location.href = \"/\"\n                    })\n                }\n            })\n        })\n    }\n\n    constructor(props: LoginProps) {\n        super(props);\n        if(doesUserDataExist().exist == true){\n            window.location.href = \"/\"\n        }\n        this.state = { \n            username:\"\",\n            password:\"\"\n         };\n    }\n    render() { \n        return ( \n            <Card className=\"login-card\">\n                <Card.Content>\n                <Card.Header>LOGIN</Card.Header>\n                <Card.Meta>\n                    <p>Please enter your username and your password</p>\n                </Card.Meta>\n                <Card.Description>\n                    <Input onChange={(e, d)=>{\n                        this.setState({username:d.value})\n                    }} className=\"login-textFields\" icon='user' iconPosition='left' placeholder='Username' />\n                    <Input onChange={(e, d)=>{\n                        this.setState({password:d.value})\n                    }} className=\"login-textFields\" type=\"password\" icon='key' iconPosition='left' placeholder='Password' />\n                </Card.Description>\n                </Card.Content>\n\n                <Card.Content extra>\n                <Button onClick={this.login} animated>\n                    <Button.Content visible>LOGIN</Button.Content>\n                    <Button.Content hidden>\n                        <Icon name='arrow right' />\n                    </Button.Content>\n                </Button>\n                </Card.Content>\n            </Card>\n         );\n    }\n}\n \nexport default Login;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {doesUserDataExist} from './utils/localStorage';\nimport store from './store';\nimport {\n  Table,\n  Label,\n  Menu,\n  Icon,\n  Tab,\n  Input,\n  Accordion,\n  Divider,\n  List,\n} from 'semantic-ui-react';\n\nimport openSocket from 'socket.io-client';\nimport {CircularProgressbar, buildStyles} from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\ninterface Icpu {\n  usage: number;\n  numberOfCore: number;\n  free: number;\n}\n\nexport interface Idisk {\n  available: number;\n  free: number;\n  total: number;\n}\n\nexport interface AppProps {}\n\nexport interface AppState {\n  users: Array<any>;\n  usersRaw: Array<any>;\n\n  events: Array<any>;\n  eventsRaw: Array<any>;\n\n  userSearch: string;\n  cpu: Icpu;\n  ram: number;\n  disk: Idisk;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  panes = [\n    {\n      menuItem: 'USERS',\n      render: () => (\n        <Tab.Pane>\n          <div>\n            <Input\n              onChange={(e, data) => {\n                this.setState({userSearch: data.value}, () => {\n                  let array: Array<any> = this.state.usersRaw;\n                  let filtedArray: Array<any> = array.filter(\n                    (element, index, array) => {\n                      if (\n                        String(element['email']).includes(data.value) ||\n                        String(element['job']).includes(data.value) ||\n                        String(element['phone']).includes(data.value) ||\n                        String(element['type']).includes(data.value) ||\n                        String(element['username']).includes(data.value)\n                      ) {\n                        console.log(element);\n                        return element;\n                      }\n                    },\n                  );\n\n                  let readyArray: Array<any> = [];\n\n                  for (let i in filtedArray) {\n                    let item = (\n                      <Table.Row>\n                        <Table.Cell>{i}</Table.Cell>\n                        <Table.Cell>{filtedArray[i]['username']}</Table.Cell>\n                        <Table.Cell>{filtedArray[i]['email']}</Table.Cell>\n                        <Table.Cell>{filtedArray[i]['phone']}</Table.Cell>\n                        <Table.Cell>{filtedArray[i]['job']}</Table.Cell>\n                        <Table.Cell>{filtedArray[i]['type']}</Table.Cell>\n                      </Table.Row>\n                    );\n\n                    readyArray.push(item);\n                  }\n                  this.setState({users: readyArray});\n                });\n              }}\n              icon=\"search\"\n              placeholder=\"Search...\"\n            />\n            <div id=\"users-container\">\n              <Table celled>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>#</Table.HeaderCell>\n                    <Table.HeaderCell>USERNAME</Table.HeaderCell>\n                    <Table.HeaderCell>EMAIL</Table.HeaderCell>\n                    <Table.HeaderCell>PHONE</Table.HeaderCell>\n                    <Table.HeaderCell>JOB</Table.HeaderCell>\n                    <Table.HeaderCell>TYPE</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n\n                <Table.Body>{this.state.users}</Table.Body>\n              </Table>\n\n              <h1>\n                USERS COUNT: <strong>{this.state.usersRaw.length}</strong>\n              </h1>\n            </div>\n          </div>\n        </Tab.Pane>\n      ),\n    },\n    {\n      menuItem: 'EVENTS',\n      render: () => (\n        <Tab.Pane>\n          <h1>TOTAL EVENTS: {this.state.eventsRaw.length}</h1>\n          <Accordion panels={this.state.events} />\n        </Tab.Pane>\n      ),\n    },\n\n    {\n      menuItem: 'SERVER',\n      render: () => (\n        <Tab.Pane>\n          <h1>SERVER INFORMATION:</h1>\n          <Divider />\n\n          <List horizontal>\n            <List.Item>\n              <List.Content verticalAlign=\"middle\">CPU USAGE: </List.Content>\n              <CircularProgressbar\n                value={this.state.cpu.usage}\n                maxValue={100}\n                text={`${this.state.cpu.usage.toFixed()}%`}\n                styles={buildStyles({\n                  textSize: 10,\n                  pathColor:\n                    this.state.cpu.usage < 50\n                      ? 'green'\n                      : this.state.cpu.usage > 50 && this.state.cpu.usage < 80\n                      ? 'orange'\n                      : 'red',\n                })}\n              />\n            </List.Item>\n\n            <List.Item>\n              <List.Content verticalAlign=\"middle\">CPU FREE: </List.Content>\n              <CircularProgressbar\n                value={this.state.cpu.free}\n                maxValue={100}\n                text={`${this.state.cpu.free.toFixed()}%`}\n                styles={buildStyles({\n                  textSize: 10,\n                  pathColor:\n                    this.state.cpu.free < 50\n                      ? 'red'\n                      : this.state.cpu.free > 50 && this.state.cpu.free < 80\n                      ? 'orange'\n                      : 'green',\n                })}\n              />\n            </List.Item>\n\n            <List.Item>\n              <List.Content verticalAlign=\"middle\">\n                CPU CORES: {this.state.cpu.numberOfCore}\n              </List.Content>\n            </List.Item>\n\n            <Divider />\n\n            <List.Item>\n              <List.Content verticalAlign=\"middle\">RAM FREE: </List.Content>\n              <CircularProgressbar\n                value={this.state.ram}\n                maxValue={100}\n                text={`${this.state.ram.toFixed()}%`}\n                styles={buildStyles({\n                  textSize: 10,\n                  pathColor:\n                    this.state.ram < 50\n                      ? 'red'\n                      : this.state.cpu.free > 50 && this.state.cpu.free < 80\n                      ? 'orange'\n                      : 'green',\n                })}\n              />\n            </List.Item>\n\n            <Divider />\n\n            <List.Item>\n              <List.Content verticalAlign=\"middle\">\n                TOTAL STORAGE SPACE: <strong>{(this.state.disk.total * 1e-9).toFixed(2)}</strong>\n                GB's      \n              </List.Content>\n            </List.Item>\n\n            <List.Item>\n              <List.Content verticalAlign=\"middle\">\n                % FREE STORAGE SPACE:\n              </List.Content>\n              <CircularProgressbar\n                value={((this.state.disk.available / this.state.disk.total) * 100)}\n                maxValue={100}\n                text={`${((this.state.disk.available / this.state.disk.total) * 100).toFixed()}%`}\n                styles={buildStyles({\n                  textSize: 10,\n                  pathColor:\n                    this.state.ram < 50\n                      ? 'red'\n                      : this.state.cpu.free > 50 && this.state.cpu.free < 80\n                      ? 'orange'\n                      : 'green',\n                })}\n              />\n            </List.Item>\n            <List.Item>\n              <List.Content verticalAlign=\"middle\">\n                TOTAL USED STORAGE SPACE: <strong>{((this.state.disk.total - this.state.disk.free) * 1e-9).toFixed(2)}</strong>\n                GB's      \n              </List.Content>\n            </List.Item>\n          </List>\n        </Tab.Pane>\n      ),\n    },\n  ];\n\n  socket = openSocket('http://164.68.125.203:5500');\n\n  subscribeToServer = () => {\n    this.socket.on('CPUDATA', (r: Icpu) => {\n      this.setState({cpu: r});\n    });\n\n    this.socket.on('RAMDATA', (r: number) => {\n      this.setState({ram: r * 100});\n    });\n\n    this.socket.on('DISKDATA', (d: Idisk) => {\n      this.setState({disk: d});\n    });\n  };\n\n  init = () => {\n    let data = doesUserDataExist();\n\n    if (data.exist == true) {\n      store.dispatch({type: 'change', data: JSON.parse(data.data)});\n      this.getUsers();\n      this.getEvents();\n      this.subscribeToServer();\n    }else{\n      window.location.href = \"/login\"\n    }\n    \n  };\n\n  getUsers = () => {\n    fetch('/admin/getAllUsers', {\n      method: 'get',\n    }).then(r => {\n      r.text().then(t => {\n        console.log(JSON.parse(t));\n\n        let users = JSON.parse(t);\n        let array: Array<any> = [];\n        let arrayRaw: Array<any> = [];\n\n        for (let i in users) {\n          let item = (\n            <Table.Row>\n              <Table.Cell>{i}</Table.Cell>\n              <Table.Cell>{users[i]['username']}</Table.Cell>\n              <Table.Cell>{users[i]['email']}</Table.Cell>\n              <Table.Cell>{users[i]['phone']}</Table.Cell>\n              <Table.Cell>{users[i]['job']}</Table.Cell>\n              <Table.Cell>{users[i]['type']}</Table.Cell>\n            </Table.Row>\n          );\n\n          array.push(item);\n          arrayRaw.push(users[i]);\n        }\n\n        this.setState({users: array, usersRaw: arrayRaw});\n      });\n    });\n  };\n\n  getEvents = () => {\n    fetch('/admin/getAllEvents', {\n      method: 'get',\n    }).then(r => {\n      r.text().then(t => {\n        console.log(JSON.parse(t));\n\n        let events = JSON.parse(t);\n        let array: Array<any> = [];\n        let arrayRaw: Array<any> = [];\n\n        for (let i in events) {\n          let ulItems: Array<any> = [];\n          for (let a in events[i]['going']) {\n            ulItems.push(<li>{events[i]['going'][a]}</li>);\n          }\n\n          let item = {\n            key: i,\n            title: `${events[i]['name']} - By: ${events[i]['userId']}`,\n            content: {\n              content: (\n                <div>\n                  <h5>GOING:</h5>\n                  <ul>{ulItems}</ul>\n                  <h5>\n                    DATE:{' '}\n                    {`${new Date(events[i]['date']).getDay()}/${new Date(\n                      events[i]['date'],\n                    ).getMonth()}/${new Date(events[i]['date']).getFullYear()}`}\n                  </h5>\n                  <h5>\n                    STARTS AT:{' '}\n                    {`${new Date(events[i]['startTime']).getHours()}:${new Date(\n                      events[i]['startTime'],\n                    ).getMinutes()}`}\n                  </h5>\n                  <h5>\n                    ENDS AT:{' '}\n                    {`${new Date(events[i]['endTime']).getHours()}:${new Date(\n                      events[i]['endTime'],\n                    ).getMinutes()}`}\n                  </h5>\n\n                  <h5>\n                    {events[i]['endTime'] == true\n                      ? 'IS PUBLISHED'\n                      : 'IS NOT PUBLISHED'}\n                  </h5>\n                  <h5>TYPE: {events[i]['type']}</h5>\n                  <h5>DETAILS:</h5>\n                  <p>{events[i]['details']}</p>\n                  <h5>EVENTUALITY: {events[i]['eventuality']}</h5>\n                  <h5>LOCATION: {events[i]['location']}</h5>\n                  <h5>NUMBER OF SPOTS: {events[i]['numberOfSpots']}</h5>\n                  <h5>STATUS: {events[i]['status']}</h5>\n                </div>\n              ),\n            },\n          };\n\n          array.push(item);\n          array.push(<Divider />);\n          arrayRaw.push(events[i]);\n        }\n\n        this.setState({events: array, eventsRaw: arrayRaw});\n      });\n    });\n  };\n\n  constructor(props: AppProps) {\n    super(props);\n    this.init();\n    this.state = {\n      users: [],\n      usersRaw: [],\n      userSearch: '',\n      events: [],\n      eventsRaw: [],\n      cpu: {\n        free: 0,\n        numberOfCore: 0,\n        usage: 0,\n      },\n      ram: 0,\n      disk: {\n        available: 0,\n        free: 0,\n        total: 0,\n      },\n    };\n  }\n  render() {\n    return <Tab panes={this.panes} />;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport {Provider} from \"react-redux\"\nimport store from \"./store\"\n\nimport {\n    BrowserRouter as Router,\n    Route\n  } from \"react-router-dom\";\nimport Login from './pages/login';\nimport App from './App';\n\nReactDOM.render(\n  \n  <Provider store={store}>\n    <Router>\n        <Route path=\"/login\" component={Login}/>\n        <Route exact path=\"/\" component={App}/>\n    </Router>\n  </Provider>\n\n  , document.getElementById('root'));\n\n"],"sourceRoot":""}